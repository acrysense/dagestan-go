"use strict";

function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
document.addEventListener('DOMContentLoaded', function () {
  // function's
  function bodyFixScroll(status) {
    var scrollPosition = 0;
    var paddingOffset = window.innerWidth - document.body.offsetWidth + "px";
    var elementsFixed = document.querySelectorAll(".scroll-fixed");
    if (status) {
      document.body.classList.add("scroll-disabled");
      scrollPosition = window.pageYOffset;
      document.body.style.overflow = "hidden";
      document.body.style.position = "fixed";
      if (document.body.style.top) {
        document.body.style.top = document.body.style.top;
      } else {
        document.body.style.top = "-" + scrollPosition + "px";
      }
      document.body.style.width = "100%";
      document.body.style.paddingRight = paddingOffset;
      if (elementsFixed) {
        elementsFixed.forEach(function (item) {
          item.style.marginRight = paddingOffset;
        });
      }
    } else {
      document.body.classList.remove("scroll-disabled");
      scrollPosition = Math.abs(parseInt(document.querySelector("body").style.top.replace("px", "")));
      document.body.style.removeProperty("overflow");
      document.body.style.removeProperty("position");
      document.body.style.removeProperty("top");
      document.body.style.removeProperty("width");
      document.body.style.removeProperty("padding-right");
      if (elementsFixed) {
        elementsFixed.forEach(function (item) {
          item.style.removeProperty("margin-right");
        });
      }
      window.scrollTo({
        top: !isNaN(scrollPosition) ? scrollPosition : 0,
        behavior: "instant"
      });
    }
  }

  // slides up/down/toggle
  var slideUpQna = function slideUpQna(target) {
    var duration = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 400;
    target.style.transitionProperty = 'height, margin, padding';
    target.style.transitionDuration = duration + 'ms';
    target.style.height = target.offsetHeight + 'px';
    target.offsetHeight;
    target.style.overflow = 'hidden';
    target.style.height = 0;
    target.style.paddingTop = 0;
    target.style.paddingBottom = 0;
    target.style.marginTop = 0;
    target.style.marginBottom = 0;
    if (target.previousElementSibling) {
      target.previousElementSibling.style.pointerEvents = 'none';
    }
    window.setTimeout(function () {
      target.style.display = 'none';
      target.style.removeProperty('height');
      target.style.removeProperty('padding-top');
      target.style.removeProperty('padding-bottom');
      target.style.removeProperty('margin-top');
      target.style.removeProperty('margin-bottom');
      target.style.removeProperty('overflow');
      target.style.removeProperty('transition-duration');
      target.style.removeProperty('transition-property');
      if (target.previousElementSibling) {
        target.previousElementSibling.style.pointerEvents = 'auto';
      }
    }, duration);
    target.parentNode.classList.remove('is--open');
  };
  var slideDownQna = function slideDownQna(target) {
    var duration = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 400;
    target.style.removeProperty('display');
    var display = window.getComputedStyle(target).display;
    if (display === 'none') display = 'block';
    target.style.display = display;
    var height = target.offsetHeight;
    target.style.overflow = 'hidden';
    target.style.height = 0;
    target.style.paddingTop = 0;
    target.style.paddingBottom = 0;
    target.style.marginTop = 0;
    target.style.marginBottom = 0;
    target.offsetHeight;
    target.style.transitionProperty = "height, margin, padding";
    target.style.transitionDuration = duration + 'ms';
    target.style.height = height + 'px';
    target.style.removeProperty('padding-top');
    target.style.removeProperty('padding-bottom');
    target.style.removeProperty('margin-top');
    target.style.removeProperty('margin-bottom');
    if (target.previousElementSibling) {
      target.previousElementSibling.style.pointerEvents = 'none';
    }
    window.setTimeout(function () {
      target.style.removeProperty('height');
      target.style.removeProperty('overflow');
      target.style.removeProperty('transition-duration');
      target.style.removeProperty('transition-property');
      if (target.previousElementSibling) {
        target.previousElementSibling.style.pointerEvents = 'auto';
      }
    }, duration);
    target.parentNode.classList.add('is--open');
  };

  // inputmask
  Inputmask().mask(document.querySelectorAll('input'));

  // aos
  AOS.init({
    once: true
  });

  // textarea
  var allTexareas = document.querySelectorAll('textarea');
  if (allTexareas) {
    allTexareas.forEach(function (el) {
      el.style.height = el.setAttribute("style", "height: " + el.scrollHeight + "px");
      el.classList.add("auto");
      el.addEventListener("input", function (e) {
        el.style.height = "auto";
        el.style.height = el.scrollHeight + "px";
      });
    });
  }

  // mobile menu
  var header = document.getElementById('header');
  var mobileMenu = document.getElementById('menu');
  var mobileMenuTrigger = document.getElementById('hamburger-toggle');
  if (mobileMenu && mobileMenuTrigger) {
    mobileMenuTrigger.addEventListener('click', function (event) {
      event.preventDefault();
      if (mobileMenu.classList.contains('is--active')) {
        header.classList.remove('is--menu');
        mobileMenuTrigger.classList.remove('is--active');
        mobileMenu.classList.remove('is--active');
        bodyFixScroll();
      } else {
        header.classList.add('is--menu');
        mobileMenuTrigger.classList.add('is--active');
        mobileMenu.classList.add('is--active');
        bodyFixScroll(1);
      }
    });
  }

  // tours change view
  var toursViewBtn = document.querySelectorAll('.tours__view');
  var toursWrapper = document.querySelector('.tours__wrapper');
  if (toursViewBtn) {
    toursViewBtn.forEach(function (item) {
      item.addEventListener('click', function (event) {
        event.preventDefault();
        var id = item.dataset.id;
        console.log(id);
        if (id) {
          toursViewBtn.forEach(function (child) {
            return child.classList.remove('is--active');
          });
          item.classList.add('is--active');
          if (id == '1') {
            toursWrapper.classList.remove('tours__wrapper--columns');
          } else if (id == '2') {
            toursWrapper.classList.add('tours__wrapper--columns');
          }
        }
      });
    });
  }

  // tours filter checkboxes
  var toursFilterCheckboxesMore = document.querySelectorAll('.tours-filter__more');
  if (toursFilterCheckboxesMore) {
    toursFilterCheckboxesMore.forEach(function (item) {
      item.addEventListener('click', function (event) {
        event.preventDefault();
        var parent = item.closest('.tours-filter__checkboxes');
        if (parent.classList.contains('is--expanded')) {
          parent.classList.remove('is--expanded');
          item.innerHTML = 'Раскрыть';
        } else {
          parent.classList.add('is--expanded');
          item.innerHTML = 'Скрыть';
        }
      });
    });
  }

  // availability tabs
  var availabilityTabsItems = document.querySelectorAll('.availability-tabs__item');
  if (availabilityTabsItems) {
    availabilityTabsItems.forEach(function (item, i) {
      item.addEventListener('click', function (event) {
        event.preventDefault();
        var parent = item.closest('.availability-tabs');
        parent.querySelectorAll('.availability-tabs__item').forEach(function (child) {
          return child.classList.remove('is--active');
        });
        parent.querySelectorAll('.availability-tabs__holder').forEach(function (child) {
          return child.classList.remove('is--active');
        });
        item.classList.add('is--active');
        var el = parent.querySelector('.is--active');
        var index = _toConsumableArray(parent.querySelectorAll('.availability-tabs__item')).indexOf(el);
        parent.querySelectorAll('.availability-tabs__holder')[index].classList.add('is--active');
      });
    });
  }

  // accordeon's
  var accordeonTrigger = document.querySelectorAll('.accordeon__trigger');
  var programsTrigger = document.querySelectorAll('.programs__trigger');
  if (accordeonTrigger) {
    accordeonTrigger.forEach(function (item) {
      item.addEventListener('click', function (event) {
        event.preventDefault();
        if (!item.parentNode.classList.contains('is--open')) {
          slideDownQna(item.nextElementSibling);
        } else {
          slideUpQna(item.nextElementSibling);
        }
      });
    });
  }
  if (programsTrigger) {
    programsTrigger.forEach(function (item) {
      item.addEventListener('click', function (event) {
        event.preventDefault();
        if (!item.parentNode.classList.contains('is--open')) {
          slideDownQna(item.nextElementSibling);
        } else {
          slideUpQna(item.nextElementSibling);
        }
      });
    });
  }

  // range slider
  var rangeSliders = document.querySelectorAll('.tours-filter__range-slider');
  if (rangeSliders) {
    rangeSliders.forEach(function (slider) {
      var parent = slider.closest('.tours-filter__range');
      var inputs = [parent.querySelector('.range-field__input--min'), parent.querySelector('.range-field__input--max')];
      noUiSlider.create(slider, {
        start: [Number(slider.dataset.rangeStart), Number(slider.dataset.rangeEnd)],
        connect: true,
        range: {
          'min': Number(slider.dataset.rangeMin),
          'max': Number(slider.dataset.rangeMax)
        }
      });
      slider.noUiSlider.on('update', function (values, handle) {
        inputs[handle].value = Number(values[handle]).toFixed();
      });
      inputs.forEach(function (input, handle) {
        input.addEventListener('change', function () {
          slider.noUiSlider.setHandle(handle, Number(this.value).toFixed());
        });
        input.addEventListener('keydown', function (e) {
          var values = slider.noUiSlider.get();
          var value = Number(values[handle]);
          var steps = slider.noUiSlider.steps();
          var step = steps[handle];
          var position;
          switch (e.which) {
            case 13:
              slider.noUiSlider.setHandle(handle, Number(this.value).toFixed());
              break;
            case 38:
              position = step[1];
              if (position === false) {
                position = 1;
              }
              if (position !== null) {
                slider.noUiSlider.setHandle(handle, Number(value + position).toFixed());
              }
              break;
            case 40:
              position = step[0];
              if (position === false) {
                position = 1;
              }
              if (position !== null) {
                slider.noUiSlider.setHandle(handle, Number(value - position).toFixed());
              }
              break;
          }
        });
      });
    });
  }

  // calendar
  var customDropdownCalendars = document.querySelectorAll('.calendar-dropdown-js');
  if (customDropdownCalendars) {
    customDropdownCalendars.forEach(function (item) {
      flatpickr(item, {
        mode: "range",
        minDate: "today",
        dateFormat: "d M",
        altInput: true,
        altFormat: "d M",
        locale: 'ru',
        prevArrow: '<svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M11 2L6 8L11 14" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/></svg>',
        nextArrow: '<svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M6 14L11 8L6 2" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/></svg>'
      });
    });
  }

  // tours filter
  var toursFilter = document.querySelector('.tours__filter');
  var toursFilterTrigger = document.querySelector('.tours__filter-trigger');
  var toursFilterClose = document.querySelector('.tours-filter__close');
  var toursFilterAccordeonTrigger = document.querySelectorAll('.tours-filter__trigger');
  if (toursFilter && toursFilterTrigger && toursFilterClose) {
    toursFilterTrigger.addEventListener('click', function (event) {
      event.preventDefault();
      if (!toursFilter.classList.contains('is--active')) {
        toursFilter.classList.add('is--active');
      }
    });
    toursFilterClose.addEventListener('click', function (event) {
      event.preventDefault();
      if (toursFilter.classList.contains('is--active')) {
        toursFilter.classList.remove('is--active');
      }
    });
  }
  if (toursFilterAccordeonTrigger) {
    toursFilterAccordeonTrigger.forEach(function (item) {
      item.addEventListener('click', function (event) {
        event.preventDefault();
        if (window.innerWidth <= 1023) {
          if (!item.parentNode.classList.contains('is--open')) {
            slideDownQna(item.nextElementSibling);
          } else {
            slideUpQna(item.nextElementSibling);
          }
        }
      });
    });
  }

  // tours search
  var toursSearchInput = document.querySelector('.tours-search__input');
  var toursSearchClear = document.querySelector('.tours-search__clear');
  if (toursSearchInput && toursSearchClear) {
    toursSearchClear.addEventListener('click', function (event) {
      event.preventDefault();
      toursSearchInput.value = '';
    });
  }

  // upcoming tours slider
  var upcomingToursSlider = document.querySelector('.upcoming-tours__slider .swiper');
  if (upcomingToursSlider) {
    var myUpcomingToursSlider = new Swiper(upcomingToursSlider, {
      slidesPerView: 'auto',
      spaceBetween: 25,
      speed: 800,
      breakpoints: {
        0: {
          spaceBetween: 10
        },
        744: {
          spaceBetween: 25
        }
      }
    });
  }

  // reviews slider
  var reviewsSlider = document.querySelector('.reviews__slider .swiper');
  if (reviewsSlider) {
    var myReviewsSlider = new Swiper(reviewsSlider, {
      slidesPerView: 'auto',
      spaceBetween: 193,
      loop: true,
      speed: 800,
      navigation: {
        prevEl: '.reviews__slider .swiper-button-prev',
        nextEl: '.reviews__slider .swiper-button-next'
      },
      pagination: {
        el: '.reviews__slider .swiper-pagination',
        clickable: true
      },
      breakpoints: {
        0: {
          slidesPerView: 1,
          spaceBetween: 15
        },
        744: {
          slidesPerView: 1,
          spaceBetween: 30
        },
        1024: {
          slidesPerView: 1,
          spaceBetween: 40
        },
        1200: {
          slidesPerView: 'auto',
          spaceBetween: 193
        }
      }
    });
  }

  // tour category slider
  var tourCategorySlider = document.querySelector('.tour-category__slider .swiper');
  if (tourCategorySlider) {
    var _Swiper;
    var myTourCategorySlider = new Swiper(tourCategorySlider, (_Swiper = {
      slidesPerView: 1,
      speed: 800,
      loop: true
    }, _defineProperty(_Swiper, "speed", 800), _defineProperty(_Swiper, "navigation", {
      prevEl: '.tour-category__slider .swiper-button-prev',
      nextEl: '.tour-category__slider .swiper-button-next'
    }), _Swiper));
  }

  // modals
  var modals = document.querySelectorAll('.modal');
  var modalsBtn = document.querySelectorAll('.modal-btn');
  var modalsClose = document.querySelectorAll('.modal__close');
  if (modals && modalsBtn && modalsClose) {
    // modals
    modals.forEach(function (item) {
      item.addEventListener('click', function (event) {
        if (event.target.classList.contains('modal') || event.target.classList.contains('modal__wrap')) {
          event.preventDefault();
          document.querySelectorAll('.modal.is--active').forEach(function (child) {
            return child.classList.remove('is--active');
          });
          bodyFixScroll();
        }
      });
    });

    // modals btn
    modalsBtn.forEach(function (item, i) {
      item.addEventListener('click', function (event) {
        event.preventDefault();
        var modalID = item.dataset.id;
        document.querySelectorAll('.modal.is--active').forEach(function (child) {
          return child.classList.remove('is--active');
        });
        document.getElementById(modalID).classList.add('is--active');
        bodyFixScroll(1);
      });
    });

    // modals close
    modalsClose.forEach(function (item) {
      item.addEventListener('click', function (event) {
        event.preventDefault();
        document.querySelectorAll('.modal.is--active').forEach(function (child) {
          return child.classList.remove('is--active');
        });
        bodyFixScroll();
      });
    });
  }
});